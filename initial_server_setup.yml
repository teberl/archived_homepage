###########################################################################################################
# Playbook: Initial Server Setup
#
# Based on: https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04
# Guide: https://www.digitalocean.com/community/tutorials/automating-initial-server-setup-with-ansible
# Guide: https://www.digitalocean.com/community/tutorials/how-to-use-ansible-to-install-and-set-up-docker-on-ubuntu-18-04
###################################################################################################################

---
- hosts: all
  become: true
  remote_user: root
  gather_facts: false
  vars:
    create_user: developer
    sys_packages: []
    copy_local_key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/digital-ocean-key.pub') }}"

  tasks:
    # Group and System Config
    - name: Make sure we have a 'developer' group
      group:
        name: developer
        state: present

    - name: Allow 'developer' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: "^%developer"
        line: "%developer ALL=(ALL) NOPASSWD: ALL"
        validate: "/usr/sbin/visudo -cf %s"

    - name: Create a new regular user with sudo privileges
      user:
        name: "{{ create_user }}"
        state: present
        groups: developer
        append: true
        create_home: true
        shell: /bin/bash

    - name: Set authorized key for remote user
      authorized_key:
        user: "{{ create_user }}"
        state: present
        key: "{{ copy_local_key }}"

    - name: Disable password authentication for root
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: "^#?PermitRootLogin"
        line: "PermitRootLogin prohibit-password"

    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop:
        [
          "curl",
          "vim",
          "ufw",
          "apt-transport-https",
          "ca-certificates",
          "curl",
          "software-properties-common",
          "python3-pip",
          "virtualenv",
          "python3-setuptools",
          "postgresql-client",
        ]

    - name: Update all packages to the latest version
      apt:
        update_cache: yes
        upgrade: dist

    # Docker
    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest

    - name: Install Docker Module for Python
      pip:
        name: docker

    # Add PostgreSQL container
    - name: Pull default Docker image
      docker_image:
        name: "postgres:latest"
        source: pull

    - name: Create db container
      docker_container:
        name: postgresql
        image: "postgres:latest"
        pull:
        state: started
        restart_policy: always
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        volumes_from:
        # exposed_ports:
        #   - 5432
        published_ports: 5432:5432
        volumes:
          - /var/lib/postgresql/data
        # healthcheck: ...

    # Firewall Settings
    - name: UFW - Allow SSH connections
      ufw:
        rule: allow
        name: OpenSSH

    - name: UFW - Deny all other incoming traffic by default
      ufw:
        state: enabled
        policy: deny
        direction: incoming

    # Reboot
    - name: Reboot to apply updates
      reboot:
        reboot_timeout: 3600
